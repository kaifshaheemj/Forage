# -*- coding: utf-8 -*-
"""Price a commodity storage contract.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lV8MR19YTGa4Zcf_c6LNRIo_zFGZBT-B
"""

from google.colab import files
  upload=files.upload()

import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
from statsmodels.graphics.tsaplots import seasonal_plot
from statsmodels.tsa.seasonal import seasonal_decompose
import statsmodels.api as sm
from statsmodels.tsa.stattools import adfuller

data=pd.read_csv("/content/Nat_Gas.csv")
data=pd.DataFrame(data)
data['Dates'] = pd.to_datetime(data['Dates'])
data.set_index('Dates',inplace=True)

def model(date,data):

  seasonal_order = (1, 1, 1, 12)
  order = (1, 1, 1)
  trend_order = 'n'#no trend
  result = adfuller(data) #find whether then time series data has presence of trend or not if pvalue is greater than 0.5 then its linear
  # SARIMA model
  if (result[1]>0.5):
    trend_order = 't' #linear
  else:
    trend_order = 'n' # no trend
  model = sm.tsa.SARIMAX(data, order=order, seasonal_order=seasonal_order, trend=trend_order)
  # Fit the model to the data
  results = model.fit()
  forecast = results.get_forecast(steps=12)
  forecasted_values = forecast.predicted_mean
  forecasted_values=pd.DataFrame(forecasted_values)
  forecasted_values
  forecasted_values.rename(columns = {'predicted_mean':'Prices'}, inplace = True)
  df=[data,forecasted_values]
  res=pd.concat(df)
  pr = res.loc[date][0]
  return pr

model('2025-09-30',data)

def earnings(injection_date,withdrawal_date,injection_rate,withdraw_rate,maximum_volume,storage_cost):
  months=abs(pd.to_datetime(injection_date).month-pd.to_datetime(withdrawal_date).month)
  injection_amt=model(injection_date,data)
  withdrawal_amt=model(withdrawal_date,data)
  amt=withdrawal_amt-injection_amt
  injected_volume=injection_rate
  withdraw_volume=withdraw_rate
  if maximum_volume >=injected_volume:
    profit=amt*injected_volume-months*storage_cost
    return profit
  else:
    return 0

injection_date=input('Enter the injection_date')
withdrawal_date=input('Enter the withdrawal_date')
injection_rate=float(input('Enter the injection_rate'))
withdraw_rate=input('Enter the withdraw_rate')
maximum_volume=float(input('Enter the maximum_volume'))
storage_cost=float(input('Enter the storage_cost'))
earnings(injection_date,withdrawal_date,injection_rate,withdraw_rate,maximum_volume,storage_cost)